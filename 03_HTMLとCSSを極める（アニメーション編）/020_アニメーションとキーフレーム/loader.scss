$cBlack: black;

body {
  text-align: center;
}

.rect {
  display: inline-block;
  width: 100px;
  height: 100px;
  background-color: $cBlack;
  animation: sk-bouncedelay 1.4s ease;
  // animation-timing-function: ease;
  // animation-delay: 3s; // アニメーションが始まるまでの遅延時間を設定
  // animation-iteration-count: infinite; // 繰り返す回数を設定 iinfiniteにすると永遠と稼働
  // animation-direction: alternate-reverse; // 初期値はnormal reverseの場合は100%の状態から0%の状態になる alrernateは0%から100%、100%から0%と折り返して処理される alternate-reverseもあり100%から最初は始まり折り返す
  // animation-fill-mode: both; // アニメーションが終了した時点のCSSが適用されたまま残る。終了時点を開始時点のCSSを残す場合にはbothを入れる
  // animation-play-state: paused; // アニメーションを途中で止める これが設定された時点で止まることになる 今は止まっている状態である javascriptで処理
  // transform: scale(0); // デフォルトを0にしているので最終は何も表示されなくなる しかしanimation-fill-mode: forwardsを定義した場合にはこの場合は100%で終わることになる
}
.paused {
  animation-play-state: paused; // jsで処理
}

// @keyframes sk-bouncedelay {
//   // scaleで大きさの設定
//   0%, 50% {
//     transform: scale(0);
//     background-color: black;
//   }
//   // 50% {
//   //   transform: scale(2);
//   // }
//   100% {
//     transform: scale(1);
//     background-color: green;
//   }
// }

@keyframes sk-bouncedelay {
  // scaleで大きさの設定
  from {
    transform: scale(0);
    background-color: black;
  }
  // 50% {
  //   transform: scale(2);
  // }
  to {
    transform: scale(1);
    background-color: green;
  }
}